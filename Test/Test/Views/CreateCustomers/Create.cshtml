@model Test.Models.Customer

    @{
        Layout = null;
    }

    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
        <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:400,700">
        <title>Bootstrap Simple Registration Form</title>
        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
        <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js"></script>
        <title>Create</title>
    </head>


    <style>
        .reg {
            color: #fff;
            background: #63738a;
            font-family: 'Roboto', sans-serif;
        }

        .form-control {
            height: 40px;
            box-shadow: none;
            color: #969fa4;
        }

            .form-control:focus {
                border-color: #5cb85c;
            }

        .form-control, .btn {
            border-radius: 3px;
        }

        .signup-form {
            width: 450px;
            margin: 0 auto;
            padding: 30px 0;
            font-size: 15px;
        }

            .signup-form h2 {
                color: #636363;
                margin: 0 0 15px;
                position: relative;
                text-align: center;
            }

                .signup-form h2:before, .signup-form h2:after {
                    content: "";
                    height: 2px;
                    width: 30%;
                    background: #d4d4d4;
                    position: absolute;
                    top: 50%;
                    z-index: 2;
                }

                .signup-form h2:before {
                    left: 0;
                }

                .signup-form h2:after {
                    right: 0;
                }

            .signup-form .hint-text {
                color: #999;
                margin-bottom: 30px;
                text-align: center;
            }

            .signup-form form {
                color: #999;
                border-radius: 3px;
                margin-bottom: 15px;
                background: #f2f3f7;
                box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
                padding: 30px;
            }

            .signup-form .form-group {
                margin-bottom: 0px;
            }

            .signup-form input[type="checkbox"] {
                margin-top: 3px;
            }

            .signup-form .btn {
                font-size: 16px;
                font-weight: bold;
                min-width: 140px;

            }

            .signup-form .row div:first-child {
                padding-right: 10px;
            }

            .signup-form .row div:last-child {
                padding-left: 10px;
            }

            .signup-form a {
                color: #fff;
                text-decoration: underline;
            }

                .signup-form a:hover {
                    text-decoration: none;
                }

            .signup-form form a {
                color: #5cb85c;
                text-decoration: none;
            }

                .signup-form form a:hover {
                    text-decoration: underline;
                }
        .col-md-10 {
            padding-right: 0px;
            padding-left: 0px;
        }
    </style>


    <body class="reg">
        <div class="signup-form">
                @Scripts.Render("~/bundles/jquery")
                @Scripts.Render("~/bundles/jqueryval")
                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()

            <div class="signup-form">
                <h4>Customer</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="row">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Province, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Province, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Province, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Address1, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Address1, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Address1, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Address2, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Address2, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Address2, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="form-group">
                        @Html.LabelFor(model => model.PhoneNumber1, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.PhoneNumber1, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.PhoneNumber1, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.PhoneNumber2, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.PhoneNumber2, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.PhoneNumber2, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Company, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Company, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Company, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Department, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Department, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Department, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Image, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Image, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Image, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group">
                        @Html.LabelFor(model => model.DateOfBirth, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.DateOfBirth, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Gender, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group">
                        @Html.LabelFor(model => model.CurrentDebt, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.CurrentDebt, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.CurrentDebt, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.BonusPoint, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.BonusPoint, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.BonusPoint, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="form-group">
                        @Html.LabelFor(model => model.TaxCode, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.TaxCode, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.TaxCode, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.ManagedBy, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ManagedBy, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ManagedBy, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Group, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Group, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Group, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Create" class="btn btn-default" />
                        </div>
                        <div>
                            @*@Html.ActionLink("Back to List", "Index")*@
                            @Html.ActionLink("Back to List", "Index", "Scheduler")
                        </div>
                    </div>
                    </div>
                </div>
                }

        <div>
            @Html.ActionLink("Back to List", "Index", "Scheduler")
        </div>


            </div>
    </body>




    </html>



@*<body style=" border-top-width:20px">

    <style>
        .customerentryfrom {
            border-top-width: 10px;
            border-left-width: 10px;
            padding-bottom: 10px;
            border-right-width: 10px;
            border-color: gray;
            padding: inherit;
        }
    </style>
    <form class="customerentryfrom" id="Customerform"></form>

    <script>
        $(document).ready(function () {
            $("#Customerform").kendoForm({
                formData: {
                    FirstName: "",
                    LastName: "",
                    Password: "",
                    Birth: new Date()
                },
                items: [
                    {
                        field: "Name",
                        label: "Customer Name:",
                        validation: { required: true }
                    },
                    {
                        field: "Address1",
                        label: "Address1:",
                        validation: { required: true }
                    },
                    {
                        field: "Address2",
                        label: "Address2:",
                        validation: { required: true }
                    },
                    {
                        field: "PhoneNumber1",
                        label: "Phone Number1:",
                        validation: { required: true }
                    },
                    {
                        field: "PhoneNumber2",
                        label: "Phone Number2:",
                        validation: { required: true }
                    },
                    {
                        field: "Email",
                        label: "Email:",
                        validation: { required: true }
                    },
                    {
                        field: "Company",
                        label: "Company:",
                        validation: { required: true }
                    },
                    {
                        field: "Department",
                        label: "Department:",
                        validation: { required: true }
                    },
                    {
                        field: "Photo",
                        template: function (dataItem) {
                            return kendo.template('<input name="files" id="files" type="file" />')({ Photo: dataItem.Photo || 'https://www.flaticon.com/svg/static/icons/svg/1077/1077012.svg' });
                        },

                    },
                    {
                        field: "DateOfBirth",
                        editor: "DatePicker",
                        label: "DateOfBirth:",
                        validation: { required: true }
                    },

                    {
                        field: "CurrentDebt",
                        editor: "NumericTextBox",
                        label: "CurrentDebt:",
                        validation: { required: true }
                    },
                    {
                        field: "BonusPoint",
                        editor: "NumericTextBox",
                        label: "BonusPoint:",
                        validation: { required: true }
                    },
                    {
                        field: "TaxCode",
                        label: "TaxCode:",
                        validation: { required: true }
                    },
                    {
                        field: "Gender", editor: "DropDownList", label: "Gender", validation: { required: true }, editorOptions: {
                            optionLabel: "Select item...",
                            dataSource: [
                                { Gender: "Male", Id: 1 },
                                { Gender: "Female", Id: 2 }
                            ],
                            dataTextField: "Gender",
                            dataValueField: "Id"
                        }
                    },
                    {
                        field: "Group",
                        label: "Group:",
                        validation: { required: true }
                    },
                    {
                        field: "ManagedBy", editor: "DropDownList", label: "ManagedBy", validation: { required: true }, editorOptions: {
                            optionLabel: "Select item...",
                            dataSource: [
                                { ManagedBy: "Master Card", Id: 1 },
                                { ManagedBy: "Debit card", Id: 2 }
                            ],
                            dataTextField: "ManagedBy",
                            dataValueField: "Id"
                        }
                    },


                    {
                        field: "Province", editor: "ComboBox", label: "Province:", validation: { required: true },
                        editorOptions: {
                            placeholder: "Select Province",
                            dataTextField: "Province",
                            dataValueField: "ID",
                            filter: "contains",
                            dataSource: {
                                type: "odata",
                                serverFiltering: true,
                                transport: {
                                    read: {
                                        url: "CreateCustomers",
                                    },
                                    create: {
                                        url: "CreateCustomers/Create",
                                        cache: true,
                                        dataType: "jsonp" // "jsonp" is required for cross-domain requests; use "json" for same-domain requests
                                    },
                                    parameterMap: function (data, type) {
                                        if (type == "create") {
                                            return { models: kendo.stringify(data.models) }
                                        }
                                    }
                                }
                            }
                        }
                    }
                ]
            });
        });
    </script>
</body>*@



